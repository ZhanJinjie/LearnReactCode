{"ast":null,"code":"var _jsxFileName = \"C:\\\\zhanjinjie\\\\workspace\\\\React\\\\LearnReact\\\\05reactapp\\\\src\\\\index.js\";\nimport React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport { createStore } from 'redux';\nimport { connect, Provider } from 'react-redux'; // 函数式计数器\n\nclass Counter extends Component {\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 10,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 12,\n        columnNumber: 9\n      }\n    }, \"\\u8BA1\\u6570\\u6570\\u91CF\\uFF1A\", this.props.value), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: this.props.numAdd,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 13,\n        columnNumber: 9\n      }\n    }, \"\\u8BA1\\u6570+1\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: this.props.numSub,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 14,\n        columnNumber: 9\n      }\n    }, \"\\u8BA1\\u6570-1\"));\n  }\n\n} //1. 创建数据仓库\n\n\nconst store = createStore(reducer);\nlet actionFunction = {\n  numChange: function (state, action) {\n    state.num += action.num;\n    return state;\n  }\n}; //2.  数据处理函数\n// reduce 2个作用：一，初始化数据；二，通过获取动作改变数据。\n\nfunction reducer(state = {\n  num: 1\n}, action) {\n  // 不能在初始化redux之前调用函数\n  if (action.type.indexOf('redux') === -1) {\n    state = actionFunction[action.type](state, action);\n    return { ...state\n    }; // 使用react-redux需要对数据进行解构\n  } else {\n    return state;\n  }\n}\n\n; //3.1 将state 映射到props 函数\n\nfunction mapStateToProps(state) {\n  return {\n    value: state.num\n  };\n} //3.2 将修改state数据的方法 映射到props, 默认传入store里的dispatch方法。\n\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    numAdd: () => {\n      dispatch({\n        type: 'numChange',\n        num: 1\n      });\n    },\n    numSub: () => {\n      dispatch({\n        type: 'numChange',\n        num: -1\n      });\n    }\n  };\n} //4. 将上面的2个方法，映射到新组件上\n\n\nconst NewAPP = connect(mapStateToProps, mapDispatchToProps)(Counter); //5. 渲染\n\nReactDOM.render( /*#__PURE__*/React.createElement(Provider, {\n  store: store,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 3\n  }\n}, /*#__PURE__*/React.createElement(NewAPP, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 5\n  }\n})), document.getElementById('root'));","map":{"version":3,"sources":["C:/zhanjinjie/workspace/React/LearnReact/05reactapp/src/index.js"],"names":["React","Component","ReactDOM","createStore","connect","Provider","Counter","render","props","value","numAdd","numSub","store","reducer","actionFunction","numChange","state","action","num","type","indexOf","mapStateToProps","mapDispatchToProps","dispatch","NewAPP","document","getElementById"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,SAASC,WAAT,QAA4B,OAA5B;AACA,SAASC,OAAT,EAAkBC,QAAlB,QAAkC,aAAlC,C,CAEA;;AACA,MAAMC,OAAN,SAAsBL,SAAtB,CAAgC;AAC9BM,EAAAA,MAAM,GAAG;AACP,wBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yCAAU,KAAKC,KAAL,CAAWC,KAArB,CAFF,eAGE;AAAQ,MAAA,OAAO,EAAE,KAAKD,KAAL,CAAWE,MAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAHF,eAIE;AAAQ,MAAA,OAAO,EAAE,KAAKF,KAAL,CAAWG,MAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAJF,CADF;AAQD;;AAV6B,C,CAahC;;;AACA,MAAMC,KAAK,GAAGT,WAAW,CAACU,OAAD,CAAzB;AAEA,IAAIC,cAAc,GAAG;AACnBC,EAAAA,SAAS,EAAE,UAAUC,KAAV,EAAiBC,MAAjB,EAAyB;AAClCD,IAAAA,KAAK,CAACE,GAAN,IAAaD,MAAM,CAACC,GAApB;AACA,WAAOF,KAAP;AACD;AAJkB,CAArB,C,CAMA;AACA;;AACA,SAASH,OAAT,CAAiBG,KAAK,GAAG;AAAEE,EAAAA,GAAG,EAAE;AAAP,CAAzB,EAAqCD,MAArC,EAA6C;AAC3C;AACA,MAAIA,MAAM,CAACE,IAAP,CAAYC,OAAZ,CAAoB,OAApB,MAA+B,CAAC,CAApC,EAAuC;AACrCJ,IAAAA,KAAK,GAAGF,cAAc,CAACG,MAAM,CAACE,IAAR,CAAd,CAA4BH,KAA5B,EAAmCC,MAAnC,CAAR;AACA,WAAO,EAAC,GAAGD;AAAJ,KAAP,CAFqC,CAElB;AACpB,GAHD,MAGO;AACL,WAAOA,KAAP;AACD;AACF;;AAAA,C,CAED;;AACA,SAASK,eAAT,CAAyBL,KAAzB,EAAgC;AAC9B,SAAO;AACLP,IAAAA,KAAK,EAAEO,KAAK,CAACE;AADR,GAAP;AAGD,C,CACD;;;AACA,SAASI,kBAAT,CAA4BC,QAA5B,EAAsC;AACpC,SAAO;AACLb,IAAAA,MAAM,EAAE,MAAM;AAAEa,MAAAA,QAAQ,CAAC;AAAEJ,QAAAA,IAAI,EAAE,WAAR;AAAqBD,QAAAA,GAAG,EAAE;AAA1B,OAAD,CAAR;AAAyC,KADpD;AAELP,IAAAA,MAAM,EAAE,MAAM;AAAEY,MAAAA,QAAQ,CAAC;AAAEJ,QAAAA,IAAI,EAAE,WAAR;AAAqBD,QAAAA,GAAG,EAAE,CAAC;AAA3B,OAAD,CAAR;AAA0C;AAFrD,GAAP;AAID,C,CAED;;;AACA,MAAMM,MAAM,GAAGpB,OAAO,CACpBiB,eADoB,EAEpBC,kBAFoB,CAAP,CAGbhB,OAHa,CAAf,C,CAKA;;AACAJ,QAAQ,CAACK,MAAT,eACE,oBAAC,QAAD;AAAU,EAAA,KAAK,EAAEK,KAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBACE,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EADF,CADF,EAIEa,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAJF","sourcesContent":["import React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport { createStore } from 'redux';\nimport { connect, Provider } from 'react-redux';\n\n// 函数式计数器\nclass Counter extends Component {\n  render() {\n    return (\n      <div>\n        {/* 3. 获取数据 */}\n        <h1>计数数量：{this.props.value}</h1>\n        <button onClick={this.props.numAdd}>计数+1</button>\n        <button onClick={this.props.numSub}>计数-1</button>\n      </div>\n    )\n  }\n}\n\n//1. 创建数据仓库\nconst store = createStore(reducer);\n\nlet actionFunction = {\n  numChange: function (state, action) {\n    state.num += action.num;\n    return state;\n  }\n}\n//2.  数据处理函数\n// reduce 2个作用：一，初始化数据；二，通过获取动作改变数据。\nfunction reducer(state = { num: 1 }, action) {\n  // 不能在初始化redux之前调用函数\n  if (action.type.indexOf('redux')===-1) { \n    state = actionFunction[action.type](state, action);\n    return {...state}; // 使用react-redux需要对数据进行解构\n  } else {\n    return state;\n  }\n};\n\n//3.1 将state 映射到props 函数\nfunction mapStateToProps(state) {\n  return {\n    value: state.num\n  }\n}\n//3.2 将修改state数据的方法 映射到props, 默认传入store里的dispatch方法。\nfunction mapDispatchToProps(dispatch) {\n  return {\n    numAdd: () => { dispatch({ type: 'numChange', num: 1 }) },\n    numSub: () => { dispatch({ type: 'numChange', num: -1 }) }\n  }\n}\n\n//4. 将上面的2个方法，映射到新组件上\nconst NewAPP = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Counter);\n\n//5. 渲染\nReactDOM.render(\n  <Provider store={store}>\n    <NewAPP></NewAPP>\n  </Provider>,\n  document.getElementById('root')\n);\n\n"]},"metadata":{},"sourceType":"module"}